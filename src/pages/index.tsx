import { useSession, useUser } from "@clerk/nextjs";
import { Loader2 } from "lucide-react";
import { type NextPage } from "next";
import Head from "next/head";
import { z } from "zod";
import { Button } from "~/ui/button";

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogTitle,
  DialogTrigger
} from "~/ui/dialog";
import { Label } from "~/ui/label";
import { Textarea } from "~/ui/textarea";
import { api } from "~/utils/api";
import { useZodForm } from "~/utils/zod-form";

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const user = useUser();
  console.log(user);
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gray-800">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          {hello.data?.greeting}
          <Dialog>
            <DialogTrigger className="border px-2 py-1.5 rounded-lg"><>Post a FAQ</></DialogTrigger>
            <DialogContent>
              <DialogTitle>Post a FAQ</DialogTitle>
              <DialogDescription>FAQ stands for Frequently Asked Question</DialogDescription>
              <FAQForm />
            </DialogContent>
          </Dialog>
        </div>
      </main>
    </>
  );
};

export const FAQFormSchema = z.object({
  question: z.string().min(3),
  answer: z.string().min(5),
});

function FAQForm() {
  const { isSignedIn } = useSession();

  const methods = useZodForm({
    schema: FAQFormSchema,
  });

  const utils = api.useContext();
  const createFAQ = api.faq.create.useMutation({
    onSettled: async () => {
      await utils.faq.invalidate();
      methods.reset();
    },
  });

  const onSubmit = methods.handleSubmit(
    (data) => {
      createFAQ.mutate(data);
    },
    (e) => {
      console.log("Whoops... something went wrong!");
      console.error(e);
    }
  );

  return (
      <form action="" className="flex flex-col gap-4" onSubmit={void onSubmit}>
        <div className="space-y-1">
          <Label htmlFor="name">Question</Label>
          <Textarea
            id="name"
            className="bg-slate-800"
            placeholder="What is my favorite programming language?"
            {...methods.register("question")}
          />
          <p className="font-medium text-red-500">
            {methods.formState.errors?.question?.message}
          </p>
        </div>
        <div className="space-y-1">
          <Label htmlFor="text">Answer</Label>
          <Textarea
            id="text"
            className="bg-slate-800"
            placeholder="Jake++"
            {...methods.register("answer")}
          />
          <p className="font-medium text-red-500">
            {methods.formState.errors?.answer?.message}
          </p>
        </div>

        <Button type="submit" disabled={!isSignedIn}>
          {!isSignedIn
            ? "Sign in to Post"
            : createFAQ.isLoading
            ? <><Loader2 className="mr-2 h-4 w-4 animate-spin" /> <span>Loading ...</span></>
            : "Post"}
        </Button>
        <p className="font-medium text-red-500">{createFAQ.error?.message}</p>
      </form>
  );
}
export default Home;
